---
globs: *.dart
---

# Flutter 开发模式规则

## 性能优化

### 状态管理

- 使用 `setState` 进行局部状态管理
- 避免不必要的 widget 重建
- 使用 `const` 构造函数创建不可变 widget

### 列表渲染

- 长列表使用 `ListView.builder` 或 `SliverList`
- 状态页面使用 `CustomScrollView` 和 Sliver 组件
- 避免在 `build` 方法中创建大量对象

### 异步处理

- 使用 `Future.delayed` 模拟异步操作
- 检查 `mounted` 状态防止内存泄漏
- 使用 `WidgetsBinding.instance.addPostFrameCallback` 处理构建后操作

## 代码质量

### 空值安全

- 使用 `?.` 和 `??` 操作符处理空值
- 在访问可能为空的属性前进行检查
- 使用 `required` 标记必需参数

### 错误处理

- 使用 `try-catch` 捕获异常
- 提供有意义的错误信息
- 避免静默失败

### 代码复用

- 抽取公共组件到 `widgets/` 目录
- 使用 `copyWith` 方法创建模型副本
- 创建可复用的样式和主题

## 调试和测试

### 日志记录

- 使用 `debugPrint` 进行调试输出
- 避免在生产环境中留下调试代码
- 使用有意义的日志消息

### 代码结构

- 保持方法长度适中（< 50 行）
- 使用描述性的方法和变量名
- 适当添加注释解释复杂逻辑
