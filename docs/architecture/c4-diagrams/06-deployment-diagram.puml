@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml

title WhatsChat 部署架构图

Deployment_Node(userDevice, "用户设备", "多平台客户端") {
    Container(webBrowser, "Web浏览器", "Chrome/Firefox/Safari", "运行Next.js 15 Web应用")
    Container(mobileApp, "移动应用", "iOS/Android", "Flutter 3.x原生移动应用")
}

Deployment_Node(cdn, "全球CDN网络", "内容分发加速") {
    Container(staticAssets, "静态资源", "CSS/JS/Images", "Next.js构建产物和静态文件")
    Container(mediaFiles, "媒体文件", "图片/视频/音频", "用户上传的媒体内容缓存")
}

Deployment_Node(loadBalancer, "负载均衡层", "Nginx/Cloudflare") {
    Container(reverseProxy, "反向代理", "Nginx", "SSL终端和请求路由")
    Container(apiGateway, "API网关", "Kong/Nginx", "API请求路由和限流")
}

Deployment_Node(k8sCluster, "Kubernetes集群", "容器化生产环境") {
    
    Deployment_Node(webTier, "Web应用层", "前端服务") {
        Container(webAppPod, "Web应用Pod", "Next.js 15.2.4", "React 19 SSR应用服务")
        Container(webAppReplica, "Web应用副本", "Next.js 15.2.4", "水平扩展副本实例")
    }
    
    Deployment_Node(apiTier, "API服务层", "后端服务") {
        Container(apiServerPod, "API服务Pod", "Node.js 18+ Express", "RESTful API服务")
        Container(apiServerReplica, "API服务副本", "Node.js 18+ Express", "API服务水平扩展")
        Container(websocketPod, "WebSocket服务Pod", "Socket.io", "实时通信服务")
        Container(websocketReplica, "WebSocket副本", "Socket.io", "实时通信扩展")
    }
    
    Deployment_Node(cacheTier, "缓存服务层", "内存数据库") {
        ContainerDb(redisCluster, "Redis集群", "Redis + ioredis", "会话缓存和消息队列")
        ContainerDb(redisSentinel, "Redis哨兵", "Redis Sentinel", "高可用监控和故障转移")
    }
    
    Deployment_Node(searchTier, "搜索服务层", "全文搜索") {
        ContainerDb(elasticsearch, "Elasticsearch集群", "Elasticsearch", "消息搜索和日志分析")
        ContainerDb(kibana, "Kibana", "Kibana", "搜索数据可视化")
    }
}

Deployment_Node(database, "数据库层", "持久化存储") {
    Deployment_Node(primaryDB, "主数据库", "PostgreSQL主库") {
        ContainerDb(postgresqlMaster, "PostgreSQL主库", "PostgreSQL + Prisma", "用户、消息、通话等核心数据")
    }
    
    Deployment_Node(replicaDB, "只读副本", "PostgreSQL从库") {
        ContainerDb(postgresqlSlave, "PostgreSQL从库", "PostgreSQL", "读取负载分离和备份")
    }
    
    Deployment_Node(backupDB, "备份存储", "数据备份") {
        ContainerDb(backupStorage, "备份存储", "S3/MinIO", "定期数据库备份和归档")
    }
}

Deployment_Node(fileStorage, "文件存储层", "对象存储服务") {
    Container(objectStorage, "对象存储", "MinIO/AWS S3", "文件、图片、语音、视频存储")
    Container(backupStorage2, "异地备份", "跨区域备份", "文件备份和灾难恢复")
}

Deployment_Node(monitoring, "监控系统", "系统监控和告警") {
    Container(prometheus, "Prometheus", "指标收集", "系统性能指标监控")
    Container(grafana, "Grafana", "数据可视化", "监控仪表板和报表")
    Container(alertManager, "AlertManager", "告警管理", "告警规则和通知")
    Container(logAggregator, "日志聚合", "ELK Stack", "应用日志收集和分析")
}

Deployment_Node(external, "外部服务", "第三方服务集成") {
    Container(fcmService, "FCM服务", "Firebase Cloud Messaging", "Android推送通知")
    Container(apnsService, "APNs服务", "Apple Push Notification", "iOS推送通知")
    Container(emailService, "邮件服务", "SendGrid/NodeMailer", "用户验证和通知邮件")
    Container(stunTurnService, "STUN/TURN服务", "coturn", "WebRTC NAT穿透")
}

Deployment_Node(cicd, "CI/CD环境", "持续集成和部署") {
    Container(gitRepo, "Git仓库", "GitHub/GitLab", "代码版本控制和协作")
    Container(ciPipeline, "CI流水线", "GitHub Actions/GitLab CI", "自动化构建、测试、部署")
    Container(registry, "镜像仓库", "Docker Registry", "容器镜像存储和版本管理")
    Container(deployment, "部署工具", "ArgoCD/Helm", "Kubernetes自动化部署")
}

Deployment_Node(development, "开发环境", "本地开发") {
    Container(turborepo, "Turborepo", "Monorepo构建", "本地开发和构建工具")
    Container(pnpm, "PNPM", "包管理器", "依赖管理和工作区")
}

' 用户访问关系
Rel(userDevice, cdn, "获取静态资源", "HTTPS")
Rel(userDevice, loadBalancer, "应用访问", "HTTPS/WSS")

' CDN关系
Rel(cdn, objectStorage, "源站拉取", "HTTPS")
Rel(cdn, webTier, "动态内容", "HTTPS")

' 负载均衡关系
Rel(loadBalancer, webTier, "Web请求路由", "HTTP")
Rel(loadBalancer, apiTier, "API请求路由", "HTTP")

' 应用层关系
Rel(webTier, apiTier, "API调用", "HTTP/WebSocket")
Rel(apiTier, cacheTier, "缓存操作", "Redis协议")
Rel(apiTier, database, "数据库操作", "PostgreSQL协议")
Rel(apiTier, fileStorage, "文件操作", "S3兼容API")
Rel(apiTier, searchTier, "搜索操作", "HTTP/REST")

' 数据库关系
Rel(primaryDB, replicaDB, "主从复制", "PostgreSQL流复制")
Rel(primaryDB, backupDB, "定期备份", "pg_dump/pg_basebackup")

' 文件存储关系
Rel(objectStorage, backupStorage2, "异地备份", "S3跨区域复制")

' 监控关系
Rel(k8sCluster, monitoring, "指标上报", "Prometheus协议")
Rel(monitoring, external, "告警通知", "HTTP/SMTP")

' 外部服务关系
Rel(apiTier, fcmService, "Android推送", "FCM API")
Rel(apiTier, apnsService, "iOS推送", "APNs API")
Rel(apiTier, emailService, "邮件发送", "SMTP/API")
Rel(websocketPod, stunTurnService, "WebRTC信令", "STUN/TURN协议")

' CI/CD关系
Rel(development, gitRepo, "代码提交", "Git")
Rel(gitRepo, ciPipeline, "触发构建", "Webhook")
Rel(ciPipeline, registry, "镜像推送", "Docker Push")
Rel(deployment, k8sCluster, "自动部署", "kubectl/Helm")
Rel(ciPipeline, deployment, "部署触发", "GitOps")

' 开发环境关系
Rel(development, turborepo, "Monorepo管理", "本地构建")
Rel(turborepo, pnpm, "依赖管理", "包安装")

' 环境说明
note top of userDevice : "用户接入层\nWeb + 移动端\n跨平台支持\n现代化界面"
note top of cdn : "内容分发层\n全球CDN加速\n静态资源缓存\n媒体文件分发"
note top of loadBalancer : "接入层\nSSL终端\n负载均衡\n请求路由"
note top of k8sCluster : "应用服务层\n容器化部署\n自动扩缩容\n服务发现"
note top of database : "数据持久层\nPostgreSQL主从\nPrisma ORM\n定期备份"
note top of fileStorage : "文件存储层\n对象存储\n异地容灾\n媒体处理"
note top of monitoring : "监控运维层\n实时监控\n告警通知\n日志分析"
note top of external : "外部服务层\n第三方集成\n推送通知\nWebRTC支持"
note top of cicd : "开发运维层\n持续集成\n自动化部署\nGitOps流程"

@enduml 