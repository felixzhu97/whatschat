@startuml
!include lib/C4_Context.puml

title WhatsChat 系统架构概览

rectangle "用户界面层" as presentation {
    rectangle "Web前端技术栈" as web_frontend {
        component "Next.js 15.2.4" as nextjs
        component "React 19" as react
        component "TypeScript 5.x" as typescript
        component "Tailwind CSS" as tailwind
        component "Radix UI" as radix
        component "Zustand 5.x" as zustand
        component "React Hook Form" as rhf
        component "Zod" as zod
    }
    
    rectangle "移动前端技术栈" as mobile_frontend {
        component "Flutter 3.x" as flutter
        component "Dart" as dart
        component "Material Design" as material
        component "Provider" as provider
        component "Cached Network Image" as cached_image
        component "Timeago" as timeago
    }
}

rectangle "通信协议层" as communication {
    component "WebSocket" as websocket
    component "Socket.io" as socketio
    component "WebRTC" as webrtc
    component "HTTP/HTTPS" as http
    component "Server-Sent Events" as sse
}

rectangle "业务逻辑层" as business {
    rectangle "前端业务逻辑" as frontend_logic {
        component "React Hooks" as hooks
        component "状态管理" as state_management
        component "App Router" as routing
        component "表单验证" as validation
        component "实时通信" as realtime_client
        component "音视频通话" as webrtc_client
    }
    
    rectangle "后端业务逻辑" as backend_logic {
        component "用户认证" as auth
        component "消息处理" as message_processing
        component "通话管理" as call_management
        component "文件管理" as file_management
        component "搜索服务" as search_service
        component "推送通知" as push_notifications
    }
}

rectangle "数据访问层" as data_access {
    rectangle "前端数据层" as frontend_data {
        component "Mock数据" as mock_data
        component "本地存储" as local_storage
        component "API客户端" as api_client
        component "缓存管理" as cache_management
    }
    
    rectangle "后端数据层" as backend_data {
        component "Prisma ORM" as prisma
        component "数据库访问" as database_access
        component "文件存储" as file_storage
        component "Redis缓存" as cache_layer
        component "Elasticsearch" as search_engine
    }
}

rectangle "基础设施层" as infrastructure {
    rectangle "存储服务" as storage_services {
        database "PostgreSQL" as postgresql
        database "Redis + ioredis" as redis
        storage "MinIO/AWS S3" as s3
        database "Elasticsearch" as elasticsearch_db
    }
    
    rectangle "运行时环境" as runtime {
        component "Node.js 18+" as nodejs
        component "现代浏览器" as browser
        component "iOS/Android设备" as mobile_device
    }
    
    rectangle "部署环境" as deployment {
        component "Docker容器" as docker
        component "Kubernetes" as k8s
        component "CI/CD流水线" as cicd
        component "监控告警" as monitoring
    }
}

rectangle "外部服务层" as external_services {
    cloud "Firebase FCM" as fcm
    cloud "Apple APNs" as apns
    cloud "SendGrid/NodeMailer" as email_service
    cloud "全球CDN" as cdn
    cloud "STUN/TURN服务器" as stun_turn
    cloud "Prometheus/Grafana" as monitoring_service
}

rectangle "开发工具链" as dev_tools {
    rectangle "构建工具" as build_tools {
        component "Turborepo" as turborepo
        component "PNPM" as pnpm
        component "Next.js构建" as nextjs_build
        component "Flutter构建" as flutter_build
    }
    
    rectangle "代码质量" as code_quality {
        component "ESLint" as eslint
        component "Prettier" as prettier
        component "TypeScript检查" as ts_check
        component "Flutter Analyze" as flutter_analyze
    }
    
    rectangle "测试框架" as testing {
        component "Jest" as jest
        component "React Testing Library" as rtl
        component "Flutter Test" as flutter_test
        component "Supertest" as supertest
    }
}

' 层间关系
presentation --> communication : "协议通信"
communication --> business : "业务处理"
business --> data_access : "数据访问"
data_access --> infrastructure : "基础设施"
infrastructure --> external_services : "外部集成"

' Web前端技术栈关系
nextjs --> react : "基于React 19"
react --> typescript : "类型安全"
tailwind --> radix : "UI组件库"
zustand --> state_management : "状态管理"
rhf --> zod : "表单验证"
hooks --> realtime_client : "实时通信"
hooks --> webrtc_client : "音视频通话"

' 移动前端技术栈关系
flutter --> dart : "开发语言"
material --> provider : "状态管理"
cached_image --> mobile_device : "图片缓存"
timeago --> material : "时间显示"

' 通信协议关系
socketio --> websocket : "基于WebSocket"
websocket --> message_processing : "实时消息"
webrtc --> call_management : "音视频通话"
http --> auth : "认证授权"

' 业务逻辑关系
hooks --> state_management : "状态管理"
auth --> database_access : "用户数据"
message_processing --> cache_layer : "消息缓存"
file_management --> file_storage : "文件存储"
search_service --> search_engine : "全文搜索"
push_notifications --> fcm : "Android推送"
push_notifications --> apns : "iOS推送"

' 数据访问关系
api_client --> mock_data : "开发数据"
local_storage --> cache_management : "本地缓存"
prisma --> database_access : "ORM映射"
database_access --> postgresql : "持久化数据"
cache_layer --> redis : "缓存数据"
file_storage --> s3 : "对象存储"
search_engine --> elasticsearch_db : "搜索索引"

' 基础设施关系
nodejs --> docker : "容器化"
docker --> k8s : "容器编排"
k8s --> monitoring : "监控部署"
cicd --> monitoring : "持续集成"

' 外部服务关系
fcm --> mobile_device : "Android推送"
apns --> mobile_device : "iOS推送"
email_service --> auth : "邮件验证"
cdn --> file_storage : "文件加速"
stun_turn --> webrtc : "NAT穿透"
monitoring_service --> monitoring : "系统监控"

' 开发工具关系
turborepo --> build_tools : "Monorepo构建"
pnpm --> turborepo : "包管理"
nextjs_build --> nextjs : "Web应用构建"
flutter_build --> flutter : "移动应用构建"
eslint --> code_quality : "代码检查"
prettier --> code_quality : "代码格式化"
ts_check --> typescript : "类型检查"
flutter_analyze --> dart : "Dart代码分析"
jest --> testing : "单元测试"
rtl --> react : "React组件测试"
flutter_test --> flutter : "Flutter测试"
supertest --> nodejs : "API测试"

' 分层说明
note top of presentation : "用户界面层\nNext.js 15 + React 19\nFlutter 3.x跨平台\n现代化响应式设计"
note top of communication : "通信协议层\nSocket.io实时通信\nWebRTC P2P通话\nRESTful API"
note top of business : "业务逻辑层\n模块化架构\nHooks状态管理\n业务规则封装"
note top of data_access : "数据访问层\nPrisma ORM\n多层缓存策略\n数据抽象封装"
note top of infrastructure : "基础设施层\nKubernetes部署\n容器化架构\n监控告警体系"
note top of external_services : "外部服务层\n第三方服务集成\n云原生架构\n扩展能力支持"

@enduml 