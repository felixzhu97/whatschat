@startuml deployment-sequence
!theme plain
title 系统部署时序图

actor 开发者 as D
participant "GitHub" as GH
participant "GitHub Actions" as GA
participant "Docker Registry" as R
participant "Kubernetes" as K
participant "服务器集群" as S
participant "监控系统" as M

== CI/CD 部署流程 ==

D -> D : 提交代码变更
D -> GH : git push origin main

GH -> GA : 触发CI/CD流水线
note right of GH : webhook事件

GA -> GA : 检出代码
GA -> GA : 运行单元测试
GA -> GA : 运行集成测试

alt 测试失败
    GA -> D : 发送失败通知
    GA --> D : 部署终止
else 测试通过
    GA -> GA : 构建Docker镜像
    GA -> R : 推送镜像到仓库
    note right of GA : whatsapp-clone:latest
    
    GA -> K : 更新部署配置
    note right of GA : kubectl apply -f k8s/
    
    K -> K : 滚动更新部署
    K -> S : 启动新Pod实例
    S --> K : Pod启动成功
    
    K -> K : 健康检查
    K -> S : 检查服务状态
    S --> K : 服务健康
    
    K -> K : 停止旧Pod实例
    K --> GA : 部署完成
    
    GA -> M : 发送部署成功通知
    GA -> D : 发送部署完成邮件
end

== 蓝绿部署流程 ==

D -> GA : 触发蓝绿部署
GA -> R : 拉取新版本镜像

GA -> K : 部署绿色环境
K -> S : 创建绿色Pod实例
S --> K : 绿色环境就绪

K -> K : 健康检查绿色环境
K -> S : 验证服务可用性
S --> K : 绿色环境健康

K -> K : 切换流量到绿色环境
K -> S : 更新负载均衡配置
S --> K : 流量切换完成

K -> K : 停止蓝色环境
K -> S : 删除蓝色Pod实例
S --> K : 蓝色环境清理完成

K --> GA : 蓝绿部署完成
GA -> M : 记录部署指标

== 回滚流程 ==

D -> GA : 触发回滚操作
GA -> K : 回滚到上一版本
K -> R : 拉取上一版本镜像

K -> S : 启动回滚Pod实例
S --> K : 回滚Pod启动成功

K -> K : 健康检查回滚版本
K -> S : 验证服务状态
S --> K : 回滚版本健康

K -> K : 切换流量到回滚版本
K --> GA : 回滚完成

GA -> M : 记录回滚事件
GA -> D : 发送回滚通知

== 监控告警流程 ==

M -> M : 监控系统指标
M -> S : 检查服务状态

alt 指标异常
    M -> M : 触发告警规则
    M -> D : 发送告警通知
    note right of M : 邮件/短信/钉钉
    
    M -> GA : 触发自动修复
    GA -> K : 执行修复操作
    K -> S : 重启异常服务
    S --> K : 服务恢复正常
    
    K --> GA : 修复完成
    GA -> M : 记录修复事件
else 指标正常
    M -> M : 继续监控
end

== 扩容流程 ==

M -> M : 检测负载过高
M -> K : 触发自动扩容
note right of M : HPA策略

K -> S : 创建新Pod实例
S --> K : 新Pod启动成功

K -> K : 更新服务配置
K -> S : 添加新Pod到负载均衡
S --> K : 扩容完成

K --> M : 扩容成功
M -> M : 更新监控指标

@enduml