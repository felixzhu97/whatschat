@startuml webrtc-call-sequence
!theme plain
title 音视频通话时序图

actor "呼叫方" as C1
actor "被叫方" as C2
participant "WebSocket服务器" as WS
participant "API服务器" as A
database "数据库" as D
participant "STUN服务器" as STUN
participant "TURN服务器" as TURN

== 发起通话流程 ==

C1 -> WS : 发起通话请求
note right of C1 : {type: 'call_request', targetUserId, callType}

WS -> A : 验证用户权限
A -> D : 检查用户状态
D --> A : 返回用户信息
A --> WS : 权限验证通过

WS -> WS : 创建通话会话
WS -> A : 保存通话记录
A -> D : INSERT INTO call_sessions
D --> A : 返回会话ID

WS -> C2 : 推送通话邀请
note right of WS : {type: 'call_invitation', callerId, callType}

C2 -> C2 : 显示通话邀请界面
C2 -> WS : 接受通话邀请
note right of C2 : {type: 'call_accepted', sessionId}

WS -> C1 : 推送通话接受通知
note right of WS : {type: 'call_accepted', sessionId}

== WebRTC连接建立 ==

C1 -> STUN : 获取ICE候选
STUN --> C1 : 返回公网IP和端口

C1 -> C1 : 创建RTCPeerConnection
C1 -> C1 : 生成Offer
C1 -> WS : 发送Offer
note right of C1 : {type: 'webrtc_offer', offer, candidates}

WS -> C2 : 转发Offer
note right of WS : {type: 'webrtc_offer', offer, candidates}

C2 -> STUN : 获取ICE候选
STUN --> C2 : 返回公网IP和端口

C2 -> C2 : 创建RTCPeerConnection
C2 -> C2 : 设置远程描述
C2 -> C2 : 生成Answer
C2 -> WS : 发送Answer
note right of C2 : {type: 'webrtc_answer', answer, candidates}

WS -> C1 : 转发Answer
note right of WS : {type: 'webrtc_answer', answer, candidates}

C1 -> C1 : 设置远程描述

== ICE候选交换 ==

C1 -> WS : 发送ICE候选
note right of C1 : {type: 'ice_candidate', candidate}
WS -> C2 : 转发ICE候选

C2 -> WS : 发送ICE候选
note right of C2 : {type: 'ice_candidate', candidate}
WS -> C1 : 转发ICE候选

== 通话进行中 ==

C1 -> C1 : 建立P2P连接
C2 -> C2 : 建立P2P连接

C1 -> C2 : 音视频数据流
C2 -> C1 : 音视频数据流

WS -> A : 更新通话状态
A -> D : UPDATE call_sessions SET status
D --> A : 更新成功

== 通话结束 ==

alt 主动挂断
    C1 -> WS : 挂断通话
    note right of C1 : {type: 'call_end', sessionId}
    WS -> C2 : 推送挂断通知
    note right of WS : {type: 'call_ended', sessionId}
else 网络断开
    WS -> WS : 检测到连接断开
    WS -> C1 : 推送断开通知
    WS -> C2 : 推送断开通知
end

WS -> A : 结束通话会话
A -> D : UPDATE call_sessions SET end_time
D --> A : 更新成功

C1 -> C1 : 清理WebRTC连接
C2 -> C2 : 清理WebRTC连接

== 通话拒绝流程 ==

C2 -> WS : 拒绝通话
note right of C2 : {type: 'call_rejected', sessionId}

WS -> C1 : 推送拒绝通知
note right of WS : {type: 'call_rejected', sessionId}

WS -> A : 更新通话状态
A -> D : UPDATE call_sessions SET status = 'rejected'
D --> A : 更新成功

@enduml