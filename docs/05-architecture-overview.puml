@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml

title WhatsChat 系统架构概览

rectangle "用户界面层" as presentation {
    rectangle "Web前端" as web_frontend {
        component "Next.js 14" as nextjs
        component "React 18" as react
        component "TypeScript" as typescript
        component "Tailwind CSS" as tailwind
        component "Shadcn/ui" as shadcn
        component "Zustand" as zustand
    }
    
    rectangle "移动前端" as mobile_frontend {
        component "Flutter 3.x" as flutter
        component "Dart" as dart
        component "Material Design" as material
        component "Provider" as provider
    }
}

rectangle "通信协议层" as communication {
    component "WebSocket" as websocket
    component "WebRTC" as webrtc
    component "HTTP/HTTPS" as http
    component "Server-Sent Events" as sse
}

rectangle "业务逻辑层" as business {
    rectangle "前端业务逻辑" as frontend_logic {
        component "React Hooks" as hooks
        component "状态管理" as state_management
        component "路由管理" as routing
        component "表单验证" as validation
    }
    
    rectangle "后端业务逻辑" as backend_logic {
        component "用户认证" as auth
        component "消息处理" as message_processing
        component "通话管理" as call_management
        component "文件管理" as file_management
        component "搜索服务" as search_service
    }
}

rectangle "数据访问层" as data_access {
    rectangle "前端数据层" as frontend_data {
        component "Mock数据" as mock_data
        component "本地存储" as local_storage
        component "缓存管理" as cache_management
    }
    
    rectangle "后端数据层" as backend_data {
        component "数据库访问" as database_access
        component "文件存储" as file_storage
        component "缓存层" as cache_layer
    }
}

rectangle "基础设施层" as infrastructure {
    rectangle "存储服务" as storage_services {
        database "PostgreSQL" as postgresql
        database "Redis" as redis
        storage "MinIO/S3" as s3
        database "Elasticsearch" as elasticsearch
    }
    
    rectangle "运行时环境" as runtime {
        component "Node.js" as nodejs
        component "浏览器" as browser
        component "移动设备" as mobile_device
    }
    
    rectangle "部署环境" as deployment {
        component "Docker" as docker
        component "Kubernetes" as k8s
        component "CI/CD" as cicd
        component "监控报警" as monitoring
    }
}

rectangle "外部服务" as external_services {
    cloud "推送服务" as push_service
    cloud "邮件服务" as email_service
    cloud "文件CDN" as cdn
    cloud "STUN/TURN" as stun_turn
    cloud "数据分析" as analytics
}

rectangle "开发工具链" as dev_tools {
    component "构建工具" as build_tools
    component "代码质量" as code_quality
    component "测试框架" as testing
    component "包管理" as package_management
}

' 层间关系
presentation --> communication : "协议通信"
communication --> business : "业务处理"
business --> data_access : "数据访问"
data_access --> infrastructure : "基础设施"
infrastructure --> external_services : "外部集成"

' 前端技术栈关系
nextjs --> react : "基于React"
react --> typescript : "类型安全"
tailwind --> shadcn : "UI组件"
zustand --> state_management : "状态管理"
flutter --> dart : "开发语言"
material --> provider : "状态管理"

' 通信协议关系
websocket --> message_processing : "实时消息"
webrtc --> call_management : "音视频通话"
http --> auth : "认证授权"

' 业务逻辑关系
hooks --> state_management : "状态管理"
auth --> database_access : "用户数据"
message_processing --> cache_layer : "消息缓存"
file_management --> file_storage : "文件存储"
search_service --> elasticsearch : "全文搜索"

' 数据访问关系
local_storage --> mock_data : "模拟数据"
cache_management --> redis : "缓存数据"
database_access --> postgresql : "持久化数据"
file_storage --> s3 : "文件存储"

' 基础设施关系
nodejs --> docker : "容器化"
docker --> k8s : "容器编排"
k8s --> monitoring : "监控部署"
cicd --> monitoring : "持续集成"

' 外部服务关系
push_service --> mobile_device : "推送通知"
email_service --> auth : "邮件验证"
cdn --> file_storage : "文件加速"
stun_turn --> webrtc : "NAT穿透"
analytics --> monitoring : "数据分析"

' 开发工具关系
build_tools --> nextjs : "Next.js构建"
build_tools --> flutter : "Flutter构建"
code_quality --> typescript : "类型检查"
testing --> hooks : "单元测试"
package_management --> nodejs : "依赖管理"

' 分层说明
note top of presentation : "用户界面层\n响应式设计\n跨平台兼容\n现代化UI框架"
note top of communication : "通信协议层\n实时双向通信\nP2P音视频\nRESTful API"
note top of business : "业务逻辑层\n功能模块化\n状态管理\n业务规则"
note top of data_access : "数据访问层\n数据抽象\n缓存策略\n存储管理"
note top of infrastructure : "基础设施层\n容器化部署\n服务治理\n监控告警"
note top of external_services : "外部服务层\n第三方集成\n云服务支持\n扩展能力"

@enduml 